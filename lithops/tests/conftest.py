from concurrent.futures import ThreadPoolExecutor
import os
import lithops
import urllib
import base64
import pytest
import logging
from lithops.config import default_config, extract_storage_config, load_yaml_config

logger = logging.getLogger(__name__)

PREFIX = '__lithops.test'
DATASET_PREFIX = PREFIX + '/dataset'

base64_bytes = 'aHR0cHM6Ly9zMy1ldS13ZXN0LTEuYW1hem9uYXdzLmNvbS9hcnRtLw=='.encode('ascii')

TEST_FILES_REPO = base64.b64decode(base64_bytes).decode('ascii')
TEST_FILES_URLS = [
    TEST_FILES_REPO + "vocab.enron.txt",
    TEST_FILES_REPO + "vocab.kos.txt",
    TEST_FILES_REPO + "vocab.nips.txt",
    TEST_FILES_REPO + "vocab.nytimes.txt",
    TEST_FILES_REPO + "vocab.pubmed.txt"
]


def pytest_addoption(parser):
    parser.addoption("--config", metavar="", default=None, help="path to lithops config file")
    parser.addoption("--backend", metavar="", default=None, help="compute backend")
    parser.addoption("--storage", metavar="", default=None, help="storage backend")
    parser.addoption("--region", metavar="", default=None, help="region")


@pytest.fixture(scope="session", autouse=True)
def setup_global(request):
    config = request.config
    config_file = config.getoption("--config")
    backend = config.getoption("--backend")
    storage = config.getoption("--storage")
    region = config.getoption("--region")
    debug = config.getoption("--debug")

    config_data = None

    if config_file:
        if os.path.exists(config_file):
            config_data = load_yaml_config(config_file)
        else:
            raise FileNotFoundError(f"The provided config file '{config_file}' does not exist")

    config_ow = {'lithops': {}, 'backend': {}}
    if storage:
        config_ow['lithops']['storage'] = storage
        if storage == 'localhost':
            config_ow['lithops']['monitoring_interval'] = 0.1
    if backend:
        config_ow['lithops']['backend'] = backend
    if debug:
        config_ow['lithops']['log_level'] = 'DEBUG'
    if region:
        config_ow['backend']['region'] = region

    lithops_config = default_config(config_data=config_data, config_overwrite=config_ow)
    words_in_files = upload_data_sets(lithops_config)

    pytest.lithops_config = lithops_config
    pytest.words_in_files = words_in_files

    yield

    clean_tests(lithops_config)


def upload_data_sets(lithops_config):
    """
    Uploads datasets to storage and return a list of
    the number of words within each test file
    """
    storage_config = extract_storage_config(lithops_config)
    storage = lithops.Storage(storage_config=storage_config)

    def up(param):
        logger.info(f'Uploading bag-of-words dataset: {param[1].split("/")[-1]}')
        i, url = param
        content = urllib.request.urlopen(url).read()
        storage.put_object(bucket=storage.bucket,
                           key=f'{DATASET_PREFIX}/test{str(i)}',
                           body=content)
        return len(content.split())

    with ThreadPoolExecutor() as pool:
        results = list(pool.map(up, enumerate(TEST_FILES_URLS)))

    return sum(results)


def clean_tests(lithops_config):
    """
    Removes all the data generated by the tests
    """
    logger.info("Cleaning test data")
    storage_config = extract_storage_config(lithops_config)
    storage = lithops.Storage(storage_config=storage_config)

    for key in storage.list_keys(bucket=storage.bucket, prefix=PREFIX):
        storage.delete_object(bucket=storage.bucket, key=key)
