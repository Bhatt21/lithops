#!/usr/bin/env python3
import os
import sys
import click
import pkgutil
import pywren_ibm_cloud as pywren
from pywren_ibm_cloud import wrenconfig
from pywren_ibm_cloud.storage import storage
from pywren_ibm_cloud.cf_connector import CloudFunctions
from pywren_ibm_cloud.wrenconfig import CF_ACTION_NAME_DEFAULT
from pywren_ibm_cloud.serialize import default_preinstalls


@click.group(invoke_without_command=True)
@click.pass_context
def cli(ctx):
    if ctx.invoked_subcommand is None:
        default()


def create_zip_action():
    print('Creating action zip...')

    if not os.path.isfile('../pywren/__main__.py'):
        os.symlink('../pywren/pywren_ibm_cloud/action/__main__.py', '../pywren/__main__.py')
    cmd = 'cd ../pywren; zip -FSr ../runtime/ibmcf_pywren.zip __main__.py pywren_ibm_cloud/ -x "*__pycache__*"'
    res = os.system(cmd)
    if res != 0:
        exit()
    os.remove('../pywren/__main__.py')


def extract_modules(image_name):
    # Extract installed Python modules from docker image
    # And store them into storage
    
    # Create runtime_name from image_name
    username, appname = image_name.split('/')
    runtime_name = appname.replace(':', '_')
    
    # Load PyWren config from ~/.pywren_config
    config = wrenconfig.default()

    # Create storage_handler to upload modules file
    storage_config = wrenconfig.extract_storage_config(config)
    internal_storage = storage.InternalStorage(storage_config)
    
    print('Creating and uploading modules file...')
    
    runtime_meta = default_preinstalls.modules['pywren_3.6']
    internal_storage.put_runtime_info(runtime_name, runtime_meta)
    
    def extract_python_modules(input=None):
        runtime_meta = dict()
        mods = list(pkgutil.iter_modules())
        runtime_meta['preinstalls'] = [entry for entry in sorted([[mod, is_pkg] for _,mod,is_pkg in mods])]
        python_version = sys.version_info
        runtime_meta['python_ver'] = str(python_version[0])+"."+str(python_version[1])
        
        return runtime_meta

    pw = pywren.ibm_cf_executor(runtime=runtime_name, log_level='ERROR')
    pw.call_async(extract_python_modules, [])
    runtime_meta = pw.get_result()
    pw.clean()

    internal_storage.put_runtime_info(runtime_name, runtime_meta)


def create_blackbox_runtime(image_name):
    # Create runtime_name from image_name
    username, appname = image_name.split('/')
    runtime_name = appname.replace(':', '_')

    # Load PyWren config from ~/.pywren_config
    config = wrenconfig.default()

    # Upload zipped PyWren action
    print('Uploading action...')
    with open("ibmcf_pywren.zip", "rb") as action_zip:
        action_bin = action_zip.read()
        cf_client = CloudFunctions(config['ibm_cf'])
        cf_client.create_action(runtime_name, memory=2048, timeout=600000,
                                code=action_bin, kind='blackbox', image=image_name)


@cli.command('create')
@click.argument('image_name')
def create(image_name):

    print('Creating a new docker image from the Dockerfile')
    print('Docker image name: {}'.format(image_name))

    cmd = 'docker build -t {} .'.format(image_name)
    res = os.system(cmd)
    if res != 0:
        exit()

    cmd = 'docker push {}'.format(image_name)
    res = os.system(cmd)
    if res != 0:
        exit()

    create_zip_action()
    create_blackbox_runtime(image_name)
    extract_modules(image_name)

    print('All done!')


@cli.command('clone')
@click.argument('image_name')
def clone(image_name):

    print('Cloning docker image {}'.format(image_name))
    create_zip_action()
    create_blackbox_runtime(image_name)
    extract_modules(image_name)

    print('All done!')


@cli.command('update')
@click.argument('image_name')
def update(image_name):
    print('Updating runtime {}'.format(image_name))
    create_zip_action()
    create_blackbox_runtime(image_name)


def default():
    print('Updating runtime {}'.format(CF_ACTION_NAME_DEFAULT))
    config = wrenconfig.default()

    # Create zipped PyWren action
    create_zip_action()

    # Upload zipped PyWren action
    print('Uploading action')
    with open("ibmcf_pywren.zip", "rb") as action_zip:
        action_bin = action_zip.read()
        cf_client = CloudFunctions(config['ibm_cf'])
        runtime_name = CF_ACTION_NAME_DEFAULT
        cf_client.create_action(runtime_name, memory=2048, timeout=600000, code=action_bin)


if __name__ == "__main__":
    cli()
